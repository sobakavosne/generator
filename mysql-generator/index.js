const { v4: uuid }        = require('uuid')

const { connection }      = require('./source/utils/db')

const { trace
      }                   = require('./source/utils/helpers')

const { removeAll 
      , insertContactsGen
      , insertTelephoneGen
      }                   = require('./source/API/controller.db')

const { generateContacts
      , generateTelephones
      }                   = require('./source/utils/generators')

const { N
      , HOST
      , DATABASE
      , GENNUMBER
      , TELLENGTH
      , PSSWDLENGTH
      , HASHTAGLENGTH
      , MINCONTACTSNUMBER
      , MAXCONTACTSNUMBER
      }                   = require('dotenv').config().parsed

                          connection.connect((e) => e ? trace(e.message) : trace(`\n\nMySQL DB "${DATABASE}" connect on ${HOST}.\n`))
                          
                          removeAll(connection, 'users')

                          removeAll(connection, 'contacts')

                          console.time(`\n${N/1000000}M records generated by Lazy.js in`)

                          const telephones = generateTelephones(N, GENNUMBER, TELLENGTH, PSSWDLENGTH, HASHTAGLENGTH)
                          
                          console.timeEnd(`\n${N/1000000}M records generated by Lazy.js in`)

                          console.time(`\nContacts for ${N/1000000}M users generated in`)
                          
                          const contacts = trace(generateContacts(telephones, MINCONTACTSNUMBER, MAXCONTACTSNUMBER))

                          console.timeEnd(`\nContacts for ${N/1000000}M users generated in`)

                          trace('\nSending generation to MySQL.\n')
                          
                          telephones.map(generation => insertTelephoneGen(connection, generation, uuid()))
                          
                          contacts.map(generation => insertContactsGen(connection, generation, uuid()))
                          
                          trace('\nNode.js finished the work.')
                          
                          connection.end((e) => e ? trace(e.message) : trace(`\nMySQL DB "${DATABASE}" disconnected.\n`))
