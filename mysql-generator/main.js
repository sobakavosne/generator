const { N
      , HOST
      , TMPPATH
      , TMPFILE
      , DATABASE
      , GENNUMBER
      , TELLENGTH
      , PSSWDLENGTH
      , HASHTAGLENGTH
      , MINCONTACTSNUMBER
      , MAXCONTACTSNUMBER
      }                   = require('dotenv').config().parsed

const { trace }           = require('./source/utils/helpers')

const { connection }      = require('./source/utils/db')

const L                   = require('lazy.js')

const R                   = require('ramda')

const { removeAll 
      , insertContactsGen
      , insertTelephoneGen
      }                   = require('./source/DB.API/db.controllers')

const { contactsIO
      , telephonesIO
      }                   = require('./index')

const { readBufferIO
      , writeBufferIO
      , removeBufferIO
      }                   = require('./source/utils/buffer')

                          connection.connect((e) => e ? trace(e.message) : trace(`\n\nMySQL DB "${DATABASE}" connect on ${HOST}.\n`))
                          
                          removeAll(connection, 'users')
                          
                          // removeAll(connection, 'contacts')

                          // console.time(`\n${N/1000000}M records generated by Lazy.js in`)

                          // telephonesIO(N, GENNUMBER, TELLENGTH, PSSWDLENGTH, HASHTAGLENGTH).run()
                          
                          Promise.resolve(telephonesIO(N, GENNUMBER, TELLENGTH, PSSWDLENGTH, HASHTAGLENGTH).run())
                            // .then(() => contactsIO(TMPPATH, TMPFILE))
                            .then(() => connection.end((e) => e ? trace(e.message) : trace(`\nMySQL DB "${DATABASE}" disconnected.\n`)))

                          // contactsIO(TMPPATH, TMPFILE)
                          
                          // console.timeEnd(`\n${N/1000000}M records generated by Lazy.js in`)
                          
                          // trace(readBufferIO(TMPPATH, TMPFILE).run())

                          // console.time(`\nContacts for ${N/1000000}M users generated in`)
                          
                          // const contacts = trace(generateContacts(telephones, MINCONTACTSNUMBER, MAXCONTACTSNUMBER))
                          
                          // console.timeEnd(`\nContacts for ${N/1000000}M users generated in`)
                          
                          // trace('\nSending generation to MySQL.\n')
                          
                          // telephones.map(generation => insertTelephoneGen(connection, generation, uuid()))
                          
                          // contacts.map(generation => insertContactsGen(connection, generation, uuid()))
                          
                          // trace('\nNode.js finished the work.')
                          
                          // connection.end((e) => e ? trace(e.message) : trace(`\nMySQL DB "${DATABASE}" disconnected.\n`))
